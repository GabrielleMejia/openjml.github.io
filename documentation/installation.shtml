<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <link href="../css/openjml.css" rel="STYLESHEET" type="text/css" />
    <meta name="description" content="OpenJML, formal methods tool for Java and the Java Modeling Language (JML)" />
    <link rel="SHORTCUT ICON" href="favicon.ico"/>

    <!-- customize the page title -->
    <title>Installing OpenJML</title>
    <!-- end customized page title -->
    </head>

<body>
  

  
<div id="rest">  

<img class="center" src="jml-logo-small64.png" alt="JML Logo" />

<div id="banner">
 <h1><a name="top">OpenJML
     (<span style="color:#006000">J</span><span style="color:#a00000">M</span><span style="color:#000090">L</span>)
      </a>
    </h1>
</div>


<div id="content">


<h2 align="center">OpenJML Installation</h2>
<p>
OpenJML is a tool for working with logical annotations in Java programs. It
enables static or run-time checking of the validity of the annotations; it also
provides an enhanced version of javadoc that includes the annotations in the
javadoc documentation.
</p>
<p>
The functionality is available 
</p>
<ul>
<li>as a command-line tool to do type-checking, static checking or runtime checking,</li>
<li>as an Eclipse plug-in to perform those tasks, and</li>
<li>programmatically from a user's Java program</li>
</ul>

<p>
<a href="#requirements">System requirements</a><br/>
<a href="#installation">Installation</a><br/>
<a href="execution.shtml">Execution</a><br/>
<a href="plugin.shtml">OpenJML in Eclipse</a>
</p>

<a name="requirements"/>
<h2>System requirements: OS and Java</h2>

<p>OpenJML requires</p>
     <ul>
	<li>A modern operating system such as Windows 7, Mac OS X, or Linux capable of running Java.</li>
	<li>A JDK for Java 8, such as OpenJDK or Oracle's JDK (Java 8 required, not 9 or 7). Java can be installed from</li>
	<ul>
	<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Oracle's Java site</a></li>
	</ul>
      </ul>


<a name="installation"/>
<h2>Installation - Command-line Java application</h2>

<p>
To install the <b>command-line tool</b>, complete these steps:
</p>
<ul>
<li>Download the <a href="http://jmlspecs.sourceforge.net/openjml.zip">release zip file</a>. </li>
<li>Select (creating if necessary) a folder of your choice to hold the installation (referred to here as <i>$OJ</i>), cd to that directory, and either
<ul>
<li>unzip the .zip file: <code>unzip openjml.zip</code></li>
<li>or, if the file was automatically unzipped for you, move the contents of the unzipped folder to the folder you created.</li>
</ul>
The <i>$OJ</i> folder should contain a file <code>openjml.jar</code>, among others.
</li>
<li>Optionally, customize the installation for your local system:</li>
<ul>
<li>Make a copy of the file <i>$OJ</i><code>/openjml-template.properties</code> as <code>openjml.properties</code>.
<li>Edit other aspects of the file to customize your installation as described in the OpenJML User Guide; some documentation is present at links below and elsewhere on this site.
</ul> 
<li>You can run OpenJML with a command-line like<br>
<code>java -jar </code><i>$OJ</i><code>/openjml.jar -help</code><br>
Further instructions are given <a href="execution.shtml">below</a>.
</li>
</ul> 

<a name="plugininstallation"/>
<h2>Installation - Eclipse plug-in</h2>

<h3>Installing Eclipse</h3>
<p>Note that you need Java 8 on your system to use OpenJML through Eclipse.</p>
<p>You can download and install Eclipse from <a href="http://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/neon3">here</a>.
You should download the 'Eclipse IDE for Java Developers' package, version Neon.2 or later.
(Other packages may do as well as long as they have support for Java development.)

<h3>Installing the plug-in</h3>
<p>Four CAUTIONS:</p>
<ul>
<li>This procedure adds the latest release of the OpenJML plug-in to Eclipse. If you want to use the
latest <i>development</i> version or to contribute to development of OpenJML, follow the 
instructions <a href="https://github.com/OpenJML/OpenJML/wiki/OpenJML-Development-Environment-Setup">here</a>.</li>
<li>Installing a plug-in adds it to the Eclipse installation. Any workspace using the same Eclipse installation
will have the plug-in available. If this is not what you want, make copies of the Eclipse installation and 
install selected plug-ins in each one individually.</li>
<li>In particular, you cannot use an Eclipse installation that has the release OpenJML plug-in 
installed for development of OpenJML.</li>
<li>You will need to reinstall the OpenJML plug-in (and all other plug-ins you install) if you install a
new installation of Eclipse, such as a new version.</li>
</ul>
<p>
To install the <b>Eclipse plug-in</b>, use the Eclipse mechanism for installing
plug-ins from an update site, using this URL for the update site: 
<code>http://jmlspecs.sourceforge.net/openjml-updatesite</code>.
The plug-in works with the Eclipse Neon.2 and later releases.
After installation and restarting, you should see a 'JML' entry in the top menu bar.
</p>
<p>
If you have a directory tree of code to which you want to apply OpenJML, it is most convenient to import
that code as an Eclipse Project:
<ul>
<li>Start Eclipse in a new workspace.</li>
<li>Close the welcome page that may be showing</li>
<li>If the code is already a shared Eclipse project (e.g., because it is shared in a code repository such as git), then</li>
<ul>
<li>Choose File &gt;&gt; Import &gt;&gt; General &gt;&gt; Existing Projects into Workspace</li>
<li>Click 'Browse' and navigate to the directory containing your source code</li>
<li>Click Finish</li>
</ul>
<li>If the code is just a directory tree, then </li>
<ul>
<li>Choose File &gt;&gt; Import &gt;&gt; General &gt;&gt; Projects from Folder or Archive</li>
<li>Click the 'Directory' button and navigate to the folder containing your source code</li>
<li>Click Finish</li>
<li>(This converts the directory into an Eclipse project by adding a <code>.project</code> file</li>
</ul>
<li>Instructions for using the plug-in can be found in the OpenJML User Guide; 
some documentation is present at links below and elsewhere on this site, such as <a href="plugin.shtml">here</a>.</li>
</ul>

<!--
<a name="SMT"/>
<h2>SMT provers</h2>
<p>
In general, OpenJML can use any SMT-LIBv2-compliant
solver, but since tools vary in their SMT-compliance and their support for various logics, 
adapter code is often needed. OpenJML has been tested with 
</p>
<p>THESE LINKS NEED UPDATING</p>
<ul>
<li><a href="http://z3.codeplex.com/">Z3</a> (version 4.3) on Windows and Mac (not quite working yet on Linux)</li>
<li><a href="http://cvc4.cs.nyu.edu">CVC4</a> (version 1.2) on Windows</li>
<li><a href="http://yices.csl.sri.com/">Yices</a> (version 2.1) on Windows or Mac OSX</li>
<li>(Linux platforms may well work but have not been tested.)</li>
</ul>
-->
 
  </div>
  </div>

<!--
<p class="title">Valid</p>
<p><a href="http://validator.w3.org/check/referer">XHTML 1.0</a></p>
<p><a href="http://jigsaw.w3.org/css-validator/check/referer">CSS2</a></p>
-->


  </body>

</html>

 
